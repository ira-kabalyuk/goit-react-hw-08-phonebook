{"version":3,"file":"static/css/813.f8dfdbfe.chunk.css","mappings":"AAIA,MACE,kBAAmB,CACnB,mCAAwC,CACxC,mCAAwC,CACxC,eAAgB,CAChB,eAAgB,CAChB,gBAAiB,CACjB,qBAAsB,CACtB,cAAe,CACf,gBAAiB,CACjB,gBAAiB,CACjB,kBAAmB,CACnB,kBAAmB,CACnB,kBAAmB,CACnB,kBAAmB,CACnB,kBAAmB,CACnB,kBAAmB,CACnB,eAAgB,CAChB,sBAAuB,CACvB,8BAA+B,CAC/B,yBAA0B,CAC1B,wBAAyB,CACzB,sFAA6F,CAE7F,qBAAsB,CACpB,iBAAkB,CAEpB,wBAAyB,CACzB,mDAAsD,CACtD,0DAA4D,CC5B5D,yBAA0B,CAC1B,sBAAuB,CACvB,0BAA2B,CAC3B,iBAAiB,CCDjB,sBF0B6D,CGmC3D,uBD9DJ,MAII,4BEJJ,MACE,wBACA,wBD4DE,uBC9DJ,MAKI,sBCPJ,MACE,oBAAqB,CACrB,oBAAqB,CACrB,qBAAsB,CACtB,uBAAwB,CACxB,oBAAqB,CCNvB,sBAKE,cACA,mBAFA,aC6DI,iBD3DJ,CH2DE,uBGjEJ,sBASI,gCCwDE,iBALS,ED/Cf,mBEYE,eFRA,oDEOA,yBDyCI,oBALS,CD1Cb,kBH+CE,uBGpDJ,mBEYE,eADA,kBFFE,iBAIJ,sBAGE,0CEJA,iBADA,yBFMA,kBHmCE,uBGvCJ,sBEDE,eADA,yBFUE,iBAIJ,qBC2BM,gBALS,CAKT,iBALS,CDlBb,cHuBE,uBG3BJ,qBC2BM,aALS,CAKT,eDpBF,UCeW,EDXf,mBACE,cAEA","sources":["styles/base/variables/_colors.scss","styles/base/variables/_typography.scss","styles/base/variables/_container.scss","styles/abstract/helpers/_breakpoints.scss","styles/base/variables/_header.scss","styles/base/variables/_z-index.scss","pages/Home/Home.module.scss","styles/abstract/helpers/_spacing.scss","styles/abstract/helpers/_helpers.scss"],"sourcesContent":["//\n// Project Colors\n//\n\n:root {\n  --black-bg: #05041f;\n  --black-bg-alpha-08: rgba(5, 4, 31, 0.8);\n  --black-bg-alpha-05: rgba(5, 4, 31, 0.5);\n  --black: #020213;\n  --camel: #b08f4e;\n  --yellow: #f3a712;\n  --light-green: #3cff4e;\n  --gold: #c6973a;\n  --silver: #919cb2;\n  --bronze: #c55a18;\n  --grey-950: #11102a;\n  --grey-900: #1e1d35;\n  --grey-800: #37364c;\n  --grey-850: #0c0c26;\n  --grey-700: #504f62;\n  --grey-200: #718792;\n  --green: #008148;\n  --text-primary: #f9f9f9;\n  --text-primary-article: #b6b6c6;\n  --secondary-white: #b1bbcd;\n  --text-secondary: #9999a9;\n  --gradient-1: linear-gradient(182.29deg, rgba(66, 3, 0, 0.5) -20.87%, var(--black-bg) 94.82%);\n\n  --blue-darken: #010029;\n    --primary: #dd0a00;\n\n  --red-contrasted: #cc365d;  \n  --gradient-2: linear-gradient(90deg, #cc365d, #1c1e60);\n  --gradient-hover-2: linear-gradient(-90deg, #cc365d, #1c1e60);\n \n}\n","//\n// Project Typography\n//\n\n:root {\n  --font-weight-regular: 400;\n  --font-weight-bold: 700;\n  --font-weight-semibold: 500;\n  --line-height: 1.2;\n}\n","@use '../../abstract/helpers/all' as h;\n\n//\n// Project container width\n//\n\n:root {\n  --container-width: 100%;\n\n  @include h.media-breakpoint-up(md) {\n    --container-width: #{h.rem(940px)};\n  }\n}\n","@use '../variables/breakpoints' as b;\n\n// stylelint-disable at-rule-empty-line-before\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 40em, md: 75em, lg: 105em)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg))\n//    md\n@function breakpoint-next($name, $breakpoints: b.$grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    40em\n@function breakpoint-min($name, $breakpoints: b.$grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: b.$grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  //@return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.01em, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: b.$grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: b.$grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  }\n\n  @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: b.$grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  }\n\n  @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: b.$grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  }\n\n  @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  }\n\n  @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: b.$grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  }\n\n  @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  }\n\n  @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@use '../../abstract/helpers/all' as h;\n\n//\n// Project header\n//\n\n:root {\n  --header-height: #{h.rem(44px)};\n  --header-submenu: #{h.rem(40px)};\n\n  @include h.media-breakpoint-up(md) {\n    --header-height: #{h.rem(64px)};\n  }\n}\n","//\n// Project z-index\n//\n\n:root {\n  --toast-z-index: 1100;\n  --header-z-index: 200;\n  --tooltip-z-index: 100;\n  --sub-header-z-index: 99;\n  --dropdown-z-index: 2;\n}\n","\n@use '../../styles/init' as *;\n\n.content {\n  @include make-spacer(mt, 3);\n  @include make-spacer(mt, 7, md);\n\n  display: grid;\n  grid-gap: rem(16px); \n  align-items: center;\n\n  @include media-breakpoint-up(md) {\n    grid-template-columns: 1fr rem(400px);  \n  }\n}\n\n.title {\n  @include font-size(48px, 56px);\n  @include make-spacer(mb, 5);\n  \n  font-weight: var(--font-weight-bold);\n  text-align: center;\n\n  @include media-breakpoint-up(md) {\n    @include font-size(64px, 72px);\n    text-align: left;\n  }\n}\n\n.subtitle {\n  @include font-size(24px, 32px);\n\n  color: var(--text-secondary);\n  text-align: center;\n\n  @include media-breakpoint-up(md) {\n    @include font-size(48px, 56px);\n    text-align: left;\n  }\n}\n\n.wrapper {\n  @include make-spacer(mx, auto);\n  @include make-spacer(mx, 0, md);\n\n  width: rem(200px);\n\n  @include media-breakpoint-up(md) {\n    width: auto;\n  }\n}\n\n.image {\n  display: block;\n  \n  width: 100%;\n}","@use '../variables/spacing' as s;\n@use 'breakpoints' as *;\n\n// stylelint-disable at-rule-empty-line-before\n\n@function get-prop-name($prop) {\n  @if (index((m, mx, my, mt, mb, ml, mr), $prop)) {\n    @return margin;\n  }\n\n  @else if (index((p, px, py, pt, pb, pl, pr), $prop)) {\n    @return padding;\n  }\n\n  @else {\n    @return null;\n  }\n}\n\n@function get-prop-postfix-group($prop) {\n  $postfix-group: ();\n\n  @if (index((pl, ml, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -left);\n  }\n\n  @if (index((pr, mr, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -right);\n  }\n\n  @if (index((pt, mt, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -top);\n  }\n\n  @if (index((pb, mb, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -bottom);\n  }\n\n  @return $postfix-group;\n}\n\n@function get-prop-value($prop, $size, $spacers: s.$spacers) {\n  $length: map-get(s.$spacers, $size);\n\n  @if (index((px, mx, pl, pr, ml, mr), $prop)) {\n    @return $length;\n  }\n\n  @else if (index((py, my, pt, pb, mt, mb), $prop)) {\n    @return $length;\n  }\n\n  @else if (index((p, m), $prop)) {\n    @return $length $length;\n  }\n\n  @else {\n    @error '#{$prop} is invalid value';\n  }\n}\n\n@mixin _make-spacer($prop, $size) { // stylelint-disable-line\n  $prop-name: get-prop-name($prop);\n  $prop-value: get-prop-value($prop, $size);\n  $prop-postfixes: get-prop-postfix-group($prop);\n\n  @if (length($prop-postfixes) > 0) {\n    @each $postfix in $prop-postfixes {\n      #{$prop-name}#{$postfix}: $prop-value;\n    }\n  }\n\n  @else {\n    #{$prop-name}: $prop-value;\n  }\n}\n\n@mixin make-spacer($prop, $size, $breakpoint: null) {\n  @if ($breakpoint) {\n    @include media-breakpoint-up($breakpoint) {\n      @include _make-spacer($prop, $size);\n    }\n  }\n\n  @else {\n    @include _make-spacer($prop, $size);\n  }\n}\n\n// @include make-spacer(mb, 2);\n// mb - margin-bottom\n// 2 - grid 2 points size (1 point for example 8px)\n","@use '../../abstract/helpers/rem-converter' as *;\n\n//\n// Smoothing font display\n//\n\n@mixin smooth-font {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n@mixin reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin reset-button {\n  margin: 0;\n  border: 0;\n  background: transparent;\n  padding: 0;\n  width: auto;\n  overflow: visible;\n}\n\n@mixin font-size($size: 16px, $height: $size) {\n  line-height: $height / $size;\n  font-size: rem($size);\n}\n\n@mixin box-shadow($shadow: 1px 1px 8px var(--black-alpha-024)) {\n  box-shadow: $shadow;\n}\n\n@mixin absolute-center($args...) {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) $args;\n}\n\n@mixin aspect-ratio ($ratio: 56.25%) {\n  display: block;\n  padding-top: $ratio;\n  width: 100%;\n  height: 0;\n}\n\n@mixin accent-gradient {\n  background: linear-gradient(90deg, #920300 0%, #920300 20.14%, #ff3100 99.73%);\n}\n\n@mixin ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin scroll {\n  scrollbar-color: rgba(249, 249, 249, 0.48), transparent;\n  scrollbar-width: thin;\n\n  &::-webkit-scrollbar {\n    background-color: transparent;\n    width: 5px;\n    height: 5px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    border-radius: rem(4px);\n    background-color: rgba(249, 249, 249, 0.48);\n  }\n}\n"],"names":[],"sourceRoot":""}